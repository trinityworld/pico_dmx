// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ---- //
// tx16 //
// ---- //

#define tx16_wrap_target 0
#define tx16_wrap 0

static const uint16_t tx16_program_instructions[] = {
            //     .wrap_target
    0x6010, //  0: out    pins, 16                   
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program tx16_program = {
    .instructions = tx16_program_instructions,
    .length = 1,
    .origin = -1,
};

static inline pio_sm_config tx16_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + tx16_wrap_target, offset + tx16_wrap);
    return c;
}

static inline void tx16_program_init(PIO pio, uint sm, uint offset, float clk_div) {
    uint pin_base = 6;
    uint pin_count = 16;
    for (uint i = pin_base; i < pin_base + pin_count; i++) { 
        pio_gpio_init(pio, i);
    }
    pio_sm_set_consecutive_pindirs(pio, sm,pin_base, pin_count, true);
    pio_sm_config c = tx16_program_get_default_config(offset);
    sm_config_set_out_pins(&c, pin_base, pin_count);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    sm_config_set_clkdiv(&c, clk_div);
    sm_config_set_out_shift(&c, true, true, 32);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

#endif

